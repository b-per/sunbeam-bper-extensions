#!/usr/bin/env python

from dataclasses import dataclass
from collections import Counter
import re
import sys
import json
from datetime import datetime, date


# Example of input

"""
10:03:09  1 of 10 START sql table model hyrule.source_quests  [RUN]
10:03:09  2 of 10 START sql table model hyrule.source_fairies  [RUN]
10:03:09  3 of 10 START sql table model hyrule.source_rupees  [RUN]
10:03:09  4 of 10 START sql table model hyrule.source_rewards  [RUN]
10:03:09  5 of 10 START sql table model hyrule.dim_fairies  [RUN]
10:03:09  6 of 10 START sql table model hyrule.fct_quests  [RUN]
10:03:19  1 of 10 OK created sql table model hyrule.source_quests  [SELECT in 10.78s]
10:03:19  7 of 10 START sql table model hyrule.fct_rupees  [RUN]
10:03:23  2 of 10 OK created sql table model hyrule.source_fairies  [SELECT in 14.44s]
10:03:23  8 of 10 START sql table model hyrule.mart_weekly_quests  [RUN]
10:03:29  3 of 10 OK created sql table model hyrule.source_rupees  [SELECT in 20.14s]
10:03:29  9 of 10 START sql incremental model hyrule.mart_weekly_rewards  [RUN]
10:05:55  7 of 10 OK created sql table model hyrule.fct_rupees  [SELECT in 155.22s]
10:05:55  10 of 10 START sql incremental model hyrule.mart_worlds  [RUN]
10:06:33  8 of 10 OK created sql table model hyrule.mart_weekly_quests  [SELECT in 189.95s]
10:06:33  11 of 12 START sql table model hyrule.heart_matrix  [RUN]
10:07:32  9 of 10 OK created sql incremental model hyrule.mart_weekly_rewards  [SELECT in 243.76s]
10:08:00  12 of 12 START sql incremental model hyrule.triforce_purchases  [RUN]
10:08:35  12 of 12 ERROR creating sql incremental model hyrule.triforce_purchases  [ERROR in 17.03s]
"""

try:
    import pyperclip # type: ignore

    raw_input = pyperclip.paste()
except ImportError:
    import subprocess

    raw_input = subprocess.check_output("pbpaste", universal_newlines=True)


@dataclass
class LogLine:
    timecode: datetime
    model_num: int
    of: str
    total_models: int
    action: str
    materialization: str
    model_name: str
    status: str
    runtime_1: str = ""
    runtime_2: str = ""

    def __post_init__(self):
        self.timecode = datetime.strptime(self.timecode, "%H:%M:%S")
        self.model_num = int(self.model_num)
        self.total_models = int(self.total_models)
        if self.action == "FAIL":
            self.materialization = "test"


input = raw_input.splitlines()

# Modify input by removing extraneous words -- this helps with string parsing later
extraneous_words = [
    "sql ",
    "created ",
    "creating ",
    "model ",
    "loaded ",
    "file ",
    "in ",
    "VIEW ",
    "\.. ",
]

for word in extraneous_words:
    input = [re.sub(word, "", line) for line in input]

input = [re.sub("PASS ", "PASS test ", line) for line in input]

log_lines = []

for line in input:
    try:
        log_lines.append(LogLine(*line.split()))
    except:
        continue

counter_models = Counter([line.model_num for line in log_lines])

model_nums_not_finished = [model_num for model_num, count in counter_models.items() if count < 2]
models_not_finished = [model for model in log_lines if model.model_num in model_nums_not_finished]

if len(log_lines) > 0:
    json.dump(
        {
            "type": "list",
            "title": "Models Not Finished ðŸ¦ˆ",
            "items": [
                {
                    "title": f"{model.model_num} - {model.model_name}",
                    "subtitle": str(model.timecode.time()),
                    "actions": [
                        {
                            "type": "copy",
                            "title": "Copy Name",
                            "text": model.model_name.split(".")[-1],
                        }
                    ],
                }
                for model in sorted(models_not_finished, key=lambda x: x.model_num)
            ],
        },
        sys.stdout,
    )

else:
    json.dump(
        {
            "type": "detail",
            "text": "No logs were parsed, get the logs in your clipboard and try again.",
        },
        sys.stdout,
    )
